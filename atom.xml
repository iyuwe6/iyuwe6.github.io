<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xeniogd.github.io</id>
    <title>xeniogd</title>
    <updated>2020-06-01T08:44:57.453Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xeniogd.github.io"/>
    <link rel="self" href="https://xeniogd.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://xeniogd.github.io/images/avatar.png</logo>
    <icon>https://xeniogd.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, xeniogd</rights>
    <entry>
        <title type="html"><![CDATA[二分查找详解]]></title>
        <id>https://xeniogd.github.io/post/er-fen-cha-zhao-xiang-jie/</id>
        <link href="https://xeniogd.github.io/post/er-fen-cha-zhao-xiang-jie/">
        </link>
        <updated>2019-12-18T12:32:21.000Z</updated>
        <summary type="html"><![CDATA[<p>二分查找看似简单，实则不简单。<br>
正如Knuth大佬（发明KMP算法的那位）所说：Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky...<br>
意思是：二分查找思路很简单，细节是魔鬼。</p>
]]></summary>
        <content type="html"><![CDATA[<p>二分查找看似简单，实则不简单。<br>
正如Knuth大佬（发明KMP算法的那位）所说：Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky...<br>
意思是：二分查找思路很简单，细节是魔鬼。</p>
<!-- more -->
<p>下面我们就来抠一下二分查找的细节，探究几个最常用的二分查找情景：寻找一个数、寻找左侧边界、寻找右侧边界。</p>
<h2 id="二分查找模板">二分查找模板</h2>
<p>二分查找框架：</p>
<pre><code class="language-java">//下面...即为细节处
int binarySearch(int[] nums, int target){
    int left = 0;
    int right = ...;
    while(...){
        int mid = ...;
        if(nums[mid] == target){
            ...
        }else if(nums[mid] &lt; target){
            left = ...
        }else if(nums[mid] &gt; target){
            right = ...
        }
    }
    return ...
}
</code></pre>
<p>分析二分查找的一个技巧是：不要出现 <strong>else</strong>，而是把所有情况用 <strong>else if</strong> 写清楚，这样可以清楚展现所有细节。本文都会使用 <strong>else if</strong>，旨在讲清楚，读者理解后可自行简化。<br>
另外说明的是：计算mid时需要防止溢出，因为 <strong>left + right</strong> 这种两数相加结果是可能位数增加导致溢出的，所以改为 <strong>left + (right - left) / 2</strong>。</p>
<h2 id="应用场景1寻找一个数">应用场景1：寻找一个数</h2>
<p>这个场景是最基本的二分查找，也是最简单，大家最熟悉的，即搜索一个数，如果存在，返回其索引，否则返回 -1.</p>
<pre><code class="language-java">代码如下：
int binarySearch(int[] nums, int target){
    int left = 0;
    int right = nums.length -1;
    
    while(left &lt;= right){
        int mid = left + (right - left) / 2;
        if(nums[mid] == target)
            return mid;
        else if(nums[mid] &lt; target)
            left = mid + 1;
        else if(nums[mid] &gt; target)
            right = mid - 1;
        }
    return -1;
}
</code></pre>
<p><strong>1. 为什么 while 循环的条件是 &lt;= , 而不是 &lt; ?</strong><br>
因为初始化 right 的赋值是 nums.length - 1, 即最后一个元素的索引，而不是nums.length。<br>
&lt;= 和 &lt; 可能处现在不同功能的二分查找中，区别是：前者是相当于两端都闭区间 [left, right]，后者相当于左闭右开区间 [left, right)，因为索引大小为 nums.length 是越界的。<br>
我们使用的是 [left, right] 两端都闭的区间，我们不妨称之为 【搜索区间】。</p>
<p>什么时候应该停止搜索呢？当然，找到了目标值的时候可以终止：</p>
<pre><code class="language-java">if(nums[mid] == target)
    return mid;
</code></pre>
<p>但如果没找到，就需要 while 循环终止，然后返回 -1。那 while 循环什么时候应该终止？搜索区间为空的时候应该终止，意味着你没得找了，就等于没找到嘛。</p>
<p>while(left &lt;= right) 的终止条件是 left == right + 1, 写成区间的形式就是 [ right + 1, right ]，或者带个具体的数字进去 [3, 2]，可见这时候搜索区间为空，因为没有数字既大于等于 3 又小于等于2的吧。所以这时候 while 循环终止是正确的，直接返回 -1 即可。</p>
<p>while(left &lt; right)的终止条件是 left == right，写成区间的形式就是 [right, right]，或者带个具体的数字进去 [2, 2]，这时候搜索区间非空，还有一个数 2，但此时 while 循环终止了。也就是说这区间 [2, 2]被漏掉了，索引 2 没有被搜索到，如果这时候直接返回 -1 就可能出现错误。<br>
当然，如果你非要用 while(left &lt; right) 也可以，我们已经知道出错的原因，就打个补丁好了：</p>
<pre><code class="language-java">//...
while(left &lt; right){
    //...
}
return nums[left] == target ? left : -1;
</code></pre>
<p><strong>2. 为什么 left = mid + 1, right = mid - 1? 我看有的代码是 right = mid 或者 left = mid, 没有这些加加减减，到底怎么回事，怎么判断？</strong><br>
这也是二分查找的一个难点，不过只要你能理解前面的内容，就能够很容易判断。<br>
刚才明确了【搜索区间】的概念，而且本算法的搜索区间是两端都封闭的，即 [left, right] 。那么当我们发现索引mid不是要找的target时，如何确定下一步的搜索区间呢？<br>
当然是去搜索 [left, mid - 1] 或者 [mid + 1, right]对不对？因为 mid 已经搜索过了，应该从搜索区间中去除。</p>
<p><strong>3.此算法有什么缺陷？</strong><br>
至此，你应该已经掌握了该算法的所有细节，以及这样处理的原因。但是，这个算法存在局限性。<br>
比如说给你有序数组 nums = [1,2,2,2,3]，target = 2，此算法返回的索引是 2，没错。但是如果我想得到 target 的左侧边界，即索引 1，或者我想得到 target 的右侧边界，即索引 3，这样的话此算法是无法处理的。<br>
这样的需求很常见。你也许会说，找到一个 target 索引，然后向左或向右线性搜索不行吗？可以，但是不好，因为这样难以保证二分查找对数级的复杂度了。<br>
我们后续的算法就是来讨论这两种二分查找的算法。</p>
<h2 id="应用场景2寻找左侧边界">应用场景2：寻找左侧边界</h2>
<p>代码如下：</p>
<pre><code class="language-java">int left_bound(int[] nums, int target){
    if(nums.length == 0) return -1;
    int left = 0;
    int right = nums.length;
    
    while(left &lt; right){
        int mid = left + (right - left) / 2;
        if(nums[mid] == target){
            right = mid;
        }else if(nums[mid] &lt; target){
            left = mid + 1;
        }else if(nums[mid] &gt; target){
            right = mid;
        }
    }
    return left;
}
</code></pre>
<p><strong>1.为什么 while(left &lt; right)而不是 &lt;= ?</strong><br>
用相同的方法分析，因为初始化 right = nums.length 而不是 nums.length – 1 。因此每次循环的「搜索区间」是 [left, right) 左闭右开。<br>
while(left &lt; right) 终止的条件是 left == right，此时搜索区间 [left, left) 恰巧为空，所以可以正确终止。</p>
<p><strong>2.为什么没有返回 -1 的操作？如果 nums 中不存在 target 这个值，怎么办？</strong><br>
因为要一步一步来，先理解一下这个 【左侧边界】的有什么特殊含义：<br>
<img src="http://x-d.xyz/picGO/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A31.png" alt="" loading="lazy"><br>
对于这个数组，算法会返回 1。这个 1 的含义可以这样解读：nums 中小于 2 的元素有 1 个。<br>
比如对于有序数组 nums = [ 2, 3, 5, 7], target = 1, 算法会返回 0，含义是：nums 中小于 1 的元素有 0 个。如果 target = 8, 算法会返回 4，含义是：nums 中小于 8 的元素有 4 个。<br>
综上可以看出，函数的返回值（即 left 变量的值）取值区间 [0, nums.length]，所以我们简单添加两行代码就能在正确的时候 return -1：</p>
<pre><code class="language-java">while(left &lt; right&gt;{
    //...
}
// target 比所有数都大
if(left == nums.length) return -1;
//类似之前算法的处理方式
return nums[left] == target ? left : -1;
</code></pre>
<p><strong>3.为什么 left = mid + 1, right = mid ? 和之前的算法不一样？</strong><br>
这个很好解释，因为我们的【搜索区间】是 [left, right)左闭右开，所以当 nums[mid] 被检测后，下一步的搜索区间应该去掉 mid 分割成两个区间，即 [left, mid) 或 [mid + 1, right)。</p>
<p><strong>4.为什么该算法能够搜索左侧边界？</strong><br>
关键在于对于 nums[mid] == target 这种情况的处理：</p>
<pre><code class="language-java">if(nums[mid] == target)
    right = mid;
</code></pre>
<p>可见，找到 target 时不要立即返回，而是缩小 【搜索区间】的上界 right，在区间 [left, mid]中继续搜索，即不断向左搜索，达到锁定左侧边界的目的。</p>
<p><strong>5.为什么返回 left 而不是 right ?</strong><br>
都是一样的，因为 while 终止的条件是 left = right。</p>
<h2 id="应用场景3寻找右侧边界">应用场景3：寻找右侧边界</h2>
<p>代码如下：</p>
<pre><code class="language-java">int right_bound(int[] nums, int target){
    if(nums.length == 0) return -1;
    int left = 0, right = nums.length;
    
    while(left &lt; right){
        int mid = left + (right - left) / 2;
        if(nums[mid] == target){
            left = mid + 1;
        }else if(nums[mid] &lt; target){
            left = mid + 1;
        }left if(nums[mid] &gt; target){
            right = mid;
        }
    }
    return left - 1;
}
</code></pre>
<p><strong>1.为什么这个算法能找到右侧边界？</strong><br>
类似地，关键点还是这里：</p>
<pre><code class="language-java">if(nums[mid] == target){
    left = mid + 1;
</code></pre>
<p>当 nums[mid] == target 时，不要立即返回，而是增大 【搜索区间】的下界 left，使得区间不断向右收缩，达到锁定右侧边界的目的。</p>
<p><strong>2.为什么最后返回 left - 1 而不像左侧边界的函数，返回 left? 而且我觉得这里既然是搜索右侧边界，应该返回 right 才对。</strong><br>
首先，while 循环的终止条件是 left == right，所以 left 和 right 是一样的，你非要体现右侧的特点，返回 right - 1好了。<br>
至于为什么要减一，这是搜索右侧边界的一个特殊点，关键在这个条件判断：</p>
<pre><code class="language-java">if(nums[mid] == target){
    left = mid + 1;
    //这样想：mid = left -1
</code></pre>
<p><img src="http://x-d.xyz/picGO/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E8%AF%A6%E8%A7%A32.png" alt="" loading="lazy"><br>
因为我们对 left 的更新必须是 left = mid + 1，就是说 while 循环结束时，nums[left] 一定不等于 target 了，而 nums[left -1]可能是 target。<br>
至于为什么 left 的更新必须是 left = mid + 1，同左侧边界搜索，就不再赘述。</p>
<p><strong>3.为什么没有返回 -1 的操作？如果 nums 中不存在 target 这个值，怎么办？</strong><br>
类似之前的左侧边界搜索，因为 while 的终止条件是 left == right，就是说 left 的取值范围是 [0, nums.length]，所以可以添加两行代码，正确的返回 -1：</p>
<pre><code class="language-java">while(left &lt; right){
    //...
}
if(left == 0) return -1;
return nums[left - 1] == target ? (left - 1) : -1;
</code></pre>
<h2 id="总结">总结</h2>
<p>先来梳理下这些细节差异的因果逻辑：<br>
第一个，最基本的二分查找算法：</p>
<blockquote>
<p>因为我们初始化 right = nums.length - 1<br>
所以决定了我们的【搜索区间】是 [left, right]<br>
所以决定了 while(left &lt;= right)<br>
同时也决定了 left = mid + 1和 right = mid - 1</p>
<p>因为我们只需找到一个 target 的索引即可<br>
所以当 nums[mid] == target 时可以立即返回</p>
</blockquote>
<p>第二个，寻找左侧边界的二分查找</p>
<blockquote>
<p>因为我们初始化 right = nums.length<br>
所以决定了我们的【搜索区间】是 [left, right)<br>
所以决定了 while(left &lt; right)<br>
同时也决定了 left = mid + 1 和 right = mid<br>
因为我们需要找到 target 的最左侧索引<br>
所以当 nums[mid] == target 时不要立即返回<br>
而要收紧右侧边界以锁定左侧边界</p>
</blockquote>
<p>第三个，寻找右侧边界的二分查找：</p>
<blockquote>
<p>因为我们初始化 right = nums.length<br>
所以决定了我们的【索索区间】是 [left, right]<br>
所以决定了 while(left &lt; right)<br>
同时也决定了 left = mid + 1 和 right = mid<br>
因为我们需找到 target 的最左侧索引<br>
所以当 nums[mid] == target 时不要立即返回<br>
而要收紧左侧边界以锁定右侧边界<br>
又因为收紧左侧边界时必须 left = mid + 1<br>
所以最后无论返回 left 还是 right，必须减一</p>
</blockquote>
<p>如果以上内容你都能理解，那么恭喜你，二分查找的细节不过如此。<br>
通过本文，你学会了：</p>
<ol>
<li>分析二分查找代码时，不要出现 else，全部展开为 else if 方便理解。</li>
<li>注意【搜素区间】和 while的终止条件，如果存在漏掉的元素，记得在最后检查。</li>
<li>如需要搜索左右边界，只需要在 nums[mid] == target时做修改即可。搜索左侧时需要减一。</li>
</ol>
<h2 id="参考文档">参考文档：</h2>
<ol>
<li>https://www.cxyxiaowu.com/2843.html</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://xeniogd.github.io/post/hello-gridea/</id>
        <link href="https://xeniogd.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>